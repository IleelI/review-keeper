generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(cuid())
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @default(now()) @updatedAt
  email           String           @unique
  hash            String
  username        String
  refreshToken    String?
  reviews         Review[]
  reviewReactions ReviewReaction[]
}

model ReactionType {
  id               String           @id @default(cuid())
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @default(now()) @updatedAt
  name             String           @unique
  reviewsReactions ReviewReaction[]
}

model Review {
  id          String           @id @default(cuid())
  content     String
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @default(now()) @updatedAt
  rating      Float?
  ratingScale Float?
  title       String
  author      User             @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId    String
  category    ReviewCategory?  @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  categoryId  String?
  reactions   ReviewReaction[]
}

model ReviewCategory {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  name      String   @unique
  usedIn    Review[]
}

model ReviewReaction {
  id        String       @id @default(cuid())
  createdAt DateTime     @default(now())
  updatedAt DateTime     @default(now()) @updatedAt
  type      ReactionType @relation(fields: [typeId], references: [id], onDelete: Cascade)
  typeId    String
  review    Review       @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  reviewId  String
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
}
